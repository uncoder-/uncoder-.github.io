<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>前端相关 on 不三之选</title><link>/categories/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/</link><description>Recent content in 前端相关 on 不三之选</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 09 May 2018 16:09:02 +0800</lastBuildDate><atom:link href="/categories/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/index.xml" rel="self" type="application/rss+xml"/><item><title>前端项目重构</title><link>/posts/%E5%89%8D%E7%AB%AF%E4%B9%8B%E9%A1%B9%E7%9B%AE%E9%87%8D%E6%9E%84/</link><pubDate>Wed, 09 May 2018 16:09:02 +0800</pubDate><guid>/posts/%E5%89%8D%E7%AB%AF%E4%B9%8B%E9%A1%B9%E7%9B%AE%E9%87%8D%E6%9E%84/</guid><description>&lt;p>鞋带和铁条做的轮子，被压瘪了。&lt;/p></description></item><item><title>Redux之中间件实现原理</title><link>/posts/redux%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link><pubDate>Fri, 27 Apr 2018 11:12:06 +0800</pubDate><guid>/posts/redux%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid><description>&lt;p>源码行数不多，很精辟、&lt;/p></description></item><item><title>flutter上手体验</title><link>/posts/flutter%E4%B8%8A%E6%89%8B%E4%BD%93%E9%AA%8C/</link><pubDate>Mon, 19 Mar 2018 15:28:20 +0800</pubDate><guid>/posts/flutter%E4%B8%8A%E6%89%8B%E4%BD%93%E9%AA%8C/</guid><description>&lt;p>对原生了解和开发过rn项目的话上手还是蛮快的，熟悉一下数据结构，语法类似java和js的混写。&lt;/p></description></item><item><title>动画性能</title><link>/posts/%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%8A%A8%E7%94%BB%E6%80%A7%E8%83%BD/</link><pubDate>Thu, 08 Mar 2018 14:52:42 +0800</pubDate><guid>/posts/%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%8A%A8%E7%94%BB%E6%80%A7%E8%83%BD/</guid><description>&lt;p>10ms ～ 16ms 内完成一帧动画，否则会卡顿。&lt;/p>
&lt;p>JavaScript » Style » Layout » Paint » Compsite&lt;/p></description></item><item><title>移动端集成reactNative调研分享</title><link>/posts/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9B%86%E6%88%90reactnative%E8%B0%83%E7%A0%94/</link><pubDate>Tue, 14 Nov 2017 10:24:42 +0800</pubDate><guid>/posts/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9B%86%E6%88%90reactnative%E8%B0%83%E7%A0%94/</guid><description>&lt;h2 id="全新项目初始化">全新项目初始化&lt;/h2>
&lt;p>&lt;a href="https://facebook.github.io/react-native/docs/getting-started.html">文档地址&lt;/a>&lt;/p></description></item><item><title>浏览器缓存机制</title><link>/posts/%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link><pubDate>Tue, 05 Sep 2017 15:23:03 +0800</pubDate><guid>/posts/%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid><description>只需要关注两个点。
cache-control（缓存策略） 服务器告知浏览器，此资源在本地的缓存方法。
no-cache。先与服务器确认返回的响应是否发生了变化，然后才能使用该响应来满足后续对同一网址的请求。如果存在合适的验证令牌 (ETag)，no-cache 会发起往返通信来验证缓存的响应，但如果资源未发生变化，则可避免下载。 no-store。禁止浏览器以及所有中间缓存存储任何版本的返回响应，每次用户请求该资产时，都会向服务器发送请求，并下载完整的响应。 max-age。指令指定从请求的时间开始，允许获取的响应被重用的最长时间（单位：秒） ETag（文件指纹） 服务器生成并返回的随机令牌通常是文件内容的哈希值或某个其他指纹。
客户端自动在“If-None-Match” HTTP 请求标头内提供 ETag 令牌。服务器根据当前资源核对令牌。如果它未发生变化，服务器将返回“304 Not Modified”响应，告知浏览器缓存中的响应未发生变化，可以再延用 max 秒。</description></item><item><title>前端性能优化</title><link>/posts/%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 05 Sep 2016 15:23:03 +0800</pubDate><guid>/posts/%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid><description>&lt;p>总之呢，就是减少物理 size，加快响应速度，缩短渲染时间&lt;/p></description></item></channel></rss>